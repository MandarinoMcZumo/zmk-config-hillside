/*
 * Copyright (c) 2021-2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt { quick-tap-ms = <175>; };

/ {
    macros {
        accent_lower_a: accent_lower_a {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp A &to 0>;
            label = "ACCENT_LOWER_A";
        };

        accent_lower_e: accent_lower_e {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp E &to 0>;
            label = "ACCENT_LOWER_E";
        };

        accent_lower_i: accent_lower_i {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp I &to 0>;
            label = "ACCENT_LOWER_I";
        };

        accent_lower_o: accent_lower_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp O &to 0>;
            label = "ACCENT_LOWER_O";
        };

        accent_lower_u: accent_lower_u {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp U &to 0>;
            label = "ACCENT_LOWER_U";
        };

        accent_upper_a: accent_upper_a {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp LS(A) &to 0>;
            label = "ACCENT_UPPER_A";
        };

        accent_upper_e: accent_upper_e {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp LS(E) &to 0>;
            label = "ACCENT_UPPER_E";
        };

        accent_upper_i: accent_upper_i {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp LS(I) &to 0>;
            label = "ACCENT_UPPER_I";
        };

        accent_upper_o: accent_upper_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp LS(O) &to 0>;
            label = "ACCENT_UPPER_O";
        };

        accent_upper_u: accent_upper_u {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp LS(U) &to 0>;
            label = "ACCENT_UPPER_U";
        };

        special_lower_n: special_lower_n {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(N) &kp N &to 0>;
            label = "SPECIAL_LOWER_N";
        };

        special_upper_n: special_upper_n {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(N) &kp LS(N) &to 0>;
            label = "SPECIAL_UPPER_N";
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <18 19 20 21 22 6 7 8 9 10 11 23 35 34 33 32 31 42 43 45 44 36 37>;
            flavor = "balanced";
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <17 16 15 14 13 38 24 0 12 1 25 26 2 3 4 5 29 28 27 39 40 41 30>;
            flavor = "balanced";
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
        };

        hmrj: hmrj {
            compatible = "zmk,behavior-hold-tap";
            label = "HMRJ";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <17 16 15 14 13 38 24 0 12 1 25 26 2 3 4 5 29 28 27 40 30 41 39>;
            flavor = "balanced";
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <25>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            /* QWERTY
 * -------------------------------------------------------------------------------------------------------------------------------------
 * | `     |   Q   |   W   |   E   |   R   |   T   |-----------------------------------|   Y   |   U   |   I   |   O   |   P   | BKSPC |
 * | TAB   |   A   |   S   |   D   |   F   |   G   |-----------------------------------|   H   |   J   |   K   |   L   |   ;   | ENTER |
 * | CTRL  |   Z   |   X   |   C   |   V   |   B   |  ESC  |-------------------|  CAPS |   N   |   M   |   ,   |   .   |   /   |   '   |
 *                                 |  GUI  |  ALT  |SK SHFT|  Nav  |---|  Sym  | SPACE |  ALT  |  GUI  |
 */

            bindings = <
&caps_word                         &kp Q         &kp W            &kp E                &kp R              &kp T                                                                               &kp Y                 &kp U                &kp I                 &kp O             &kp P            &sl 5
&hml LS(LA(LC(LEFT_COMMAND))) ESC  &hml LCTRL A  &hml LEFT_ALT S  &hml LEFT_COMMAND D  &hml LEFT_SHIFT F  &hml LA(LS(LCTRL)) G                                                                &hmr RS(RA(RCTRL)) H  &hmrj RIGHT_SHIFT J  &hmr RIGHT_COMMAND K  &hmr RIGHT_ALT L  &hmr RCTRL SEMI  &kp SQT
&kp LSHFT                          &kp Z         &kp X            &kp C                &kp V              &kp B                 &trans                                          &trans        &kp N                 &kp M                &kp COMMA             &kp DOT           &kp FSLH         &kp MINUS
                                                                                       &mo 4              &kp LEFT_SHIFT        &mt LEFT_SHIFT TAB  &lt 3 ENTER    &lt 2 SPACE  &lt 1 RETURN  &kp RIGHT_SHIFT       &kp DELETE
            >;
        };

        NUM {
            /* NAV   
 * -------------------------------------------------------------------------------------------------------------------------------------
 * | Copy  |   1   |   2   |   3   |   4   |   5   |-----------------------------------|   6   |   7   |   8   |   9   |   0   | BSPC  |
 * | Cut   |  GUI  |  Alt  | Ctrl  | Shift | Paste |-----------------------------------| PG UP |  Left |  Up   |  Down | Right | PG DN |
 * | Ctrl  |  F1   |  F2   |  F3   |  F4   |  F5   |  UnDo |-------------------| ReDo  |  F6   |  F7   |  F8   |  F9   |  F10  | Ctrl  |
 *                                 |       |       |       |       |---| ADJ_L |       |       |       |
 */

            bindings = <
&kp ASTRK  &kp N7        &kp N8        &kp N9        &kp LEFT_BRACKET  &kp RIGHT_BRACKET                                        &trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans
&kp ENTER  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS          &kp EQUAL                                                &trans  &kp F5  &kp F6   &kp F7   &kp F8   &kp BACKSPACE
&kp SLASH  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp GRAVE         &kp BACKSLASH      &trans                        &trans  &trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans
                                                     &kp COMMA         &kp N0             &kp PERIOD  &trans    &trans  &trans  &trans  &trans
            >;
        };

        SYM {
            bindings = <
&trans  &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp LEFT_BRACE  &kp RIGHT_BRACE                                                        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp DOLLAR       &kp PERCENT   &kp CARET             &kp COLON       &kp PLUS                                                               &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH              &kp TILDE       &kp PIPE              &trans                                   &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                                             &trans          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans    &trans  &trans  &trans  &trans
            >;
        };

        NAV {
            bindings = <
&trans  &kp END    &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)  &kp LG(LS(LEFT_BRACKET))  &kp LG(LS(RIGHT_BRACKET))                                    &kp HOME        &kp PG_DN  &kp PG_UP     &kp END    &kp INS  &trans
&trans  &trans     &trans                &trans                 &trans                    &trans                                                       &kp LEFT_ARROW  &kp DOWN   &kp UP_ARROW  &kp RIGHT  &trans   &trans
&trans  &kp LG(Z)  &kp LG(X)             &kp LG(C)              &kp LG(V)                 &kp LG(LS(Z))              &trans                    &trans  &trans          &trans     &trans        &trans     &trans   &trans
                                                                &trans                    &trans                     &trans  &trans    &trans  &trans  &trans          &trans
            >;
        };

        MEDIA {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&bootloader  &trans        &trans        &trans        &trans        &trans                                          &trans  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP       &trans  &trans  &trans
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                    &trans  &kp C_PLAY_PAUSE   &trans                &trans  &trans  &trans
&trans       &trans        &trans        &trans        &trans        &trans        &trans                    &trans  &trans  &kp C_BRI_DN       &kp C_BRIGHTNESS_INC  &trans  &trans  &trans
                                                       &trans        &trans        &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };

        esp_lowercase {
            bindings = <
&trans  &trans           &trans  &accent_lower_e  &trans  &trans                                    &trans            &accent_lower_u  &accent_lower_i  &accent_lower_o  &trans  &trans
&trans  &accent_lower_a  &trans  &trans           &trans  &trans                                    &trans            &trans           &trans           &trans           &trans  &trans
&trans  &trans           &trans  &trans           &trans  &trans  &trans                    &trans  &special_lower_n  &trans           &trans           &trans           &trans  &trans
                                                  &trans  &mo 6   &trans  &trans    &trans  &trans  &trans            &trans
            >;
        };

        esp_uppercase {
            bindings = <
&trans  &trans           &trans  &accent_upper_e  &trans  &trans                                    &trans            &accent_upper_u  &accent_upper_i  &accent_upper_o  &trans  &trans
&trans  &accent_upper_a  &trans  &trans           &trans  &trans                                    &trans            &trans           &trans           &trans           &trans  &trans
&trans  &trans           &trans  &trans           &trans  &trans  &trans                    &trans  &special_upper_n  &trans           &trans           &trans           &trans  &trans
                                                  &trans  &trans  &trans  &trans    &trans  &trans  &trans            &trans
            >;
        };
    };
};
